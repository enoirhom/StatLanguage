// Generated from Stat.g4 by ANTLR 4.10.1
import Antlr4

open class StatLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = StatLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(StatLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let LPAR=1, RPAR=2, LBRACES=3, RBRACES=4, COMMA=5, CONST=6, SEMICOLON=7, 
            DOT=8, COLON=9, RETURN=10, PLUS=11, MINUS=12, TIMES=13, DIVIDE=14, 
            MODULO=15, AFFECT=16, EQUAL=17, DIFF=18, LT=19, GT=20, LTOE=21, 
            GTOE=22, NOT=23, TRUE=24, FALSE=25, AND=26, OR=27, BOOLEANTYPE=28, 
            NUMBERTYPE=29, DEVICETYPE=30, IF=31, ELSE=32, ID=33, NUMBER=34, 
            COMMENT=35, WS=36

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"LPAR", "RPAR", "LBRACES", "RBRACES", "COMMA", "CONST", "SEMICOLON", "DOT", 
		"COLON", "RETURN", "PLUS", "MINUS", "TIMES", "DIVIDE", "MODULO", "AFFECT", 
		"EQUAL", "DIFF", "LT", "GT", "LTOE", "GTOE", "NOT", "TRUE", "FALSE", "AND", 
		"OR", "BOOLEANTYPE", "NUMBERTYPE", "DEVICETYPE", "IF", "ELSE", "ID", "DIGIT", 
		"LETTER", "NUMBER", "INT", "COMMENT", "WS"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "'('", "')'", "'{'", "'}'", "','", "'const'", "';'", "'.'", "':'", 
		"'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'=='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'!'", "'true'", "'false'", "'&&'", "'||'", 
		"'boolean'", "'number'", "'device'", "'if'", "'else'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, "LPAR", "RPAR", "LBRACES", "RBRACES", "COMMA", "CONST", "SEMICOLON", 
		"DOT", "COLON", "RETURN", "PLUS", "MINUS", "TIMES", "DIVIDE", "MODULO", 
		"AFFECT", "EQUAL", "DIFF", "LT", "GT", "LTOE", "GTOE", "NOT", "TRUE", 
		"FALSE", "AND", "OR", "BOOLEANTYPE", "NUMBERTYPE", "DEVICETYPE", "IF", 
		"ELSE", "ID", "NUMBER", "COMMENT", "WS"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return StatLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, StatLexer._ATN, StatLexer._decisionToDFA, StatLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "Stat.g4" }

	override open
	func getRuleNames() -> [String] { return StatLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return StatLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return StatLexer.channelNames }

	override open
	func getModeNames() -> [String] { return StatLexer.modeNames }

	override open
	func getATN() -> ATN { return StatLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,36,257,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,
		1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,5,32,189,8,
		32,10,32,12,32,192,9,32,1,33,1,33,1,34,1,34,1,35,3,35,199,8,35,1,35,1,
		35,1,35,4,35,204,8,35,11,35,12,35,205,3,35,208,8,35,1,36,1,36,1,36,5,36,
		213,8,36,10,36,12,36,216,9,36,3,36,218,8,36,1,37,1,37,1,37,1,37,5,37,224,
		8,37,10,37,12,37,227,9,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,235,8,37,
		10,37,12,37,238,9,37,1,37,3,37,241,8,37,1,37,1,37,3,37,245,8,37,3,37,247,
		8,37,1,37,1,37,1,38,4,38,252,8,38,11,38,12,38,253,1,38,1,38,2,225,236,
		0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,0,69,0,71,34,73,0,75,35,
		77,36,1,0,4,2,0,65,90,97,122,1,0,48,57,1,0,49,57,2,0,9,10,32,32,266,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,71,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,
		0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,95,1,0,0,0,15,97,1,0,0,0,
		17,99,1,0,0,0,19,101,1,0,0,0,21,108,1,0,0,0,23,110,1,0,0,0,25,112,1,0,
		0,0,27,114,1,0,0,0,29,116,1,0,0,0,31,118,1,0,0,0,33,120,1,0,0,0,35,123,
		1,0,0,0,37,126,1,0,0,0,39,128,1,0,0,0,41,130,1,0,0,0,43,133,1,0,0,0,45,
		136,1,0,0,0,47,138,1,0,0,0,49,143,1,0,0,0,51,149,1,0,0,0,53,152,1,0,0,
		0,55,155,1,0,0,0,57,163,1,0,0,0,59,170,1,0,0,0,61,177,1,0,0,0,63,180,1,
		0,0,0,65,185,1,0,0,0,67,193,1,0,0,0,69,195,1,0,0,0,71,198,1,0,0,0,73,217,
		1,0,0,0,75,246,1,0,0,0,77,251,1,0,0,0,79,80,5,40,0,0,80,2,1,0,0,0,81,82,
		5,41,0,0,82,4,1,0,0,0,83,84,5,123,0,0,84,6,1,0,0,0,85,86,5,125,0,0,86,
		8,1,0,0,0,87,88,5,44,0,0,88,10,1,0,0,0,89,90,5,99,0,0,90,91,5,111,0,0,
		91,92,5,110,0,0,92,93,5,115,0,0,93,94,5,116,0,0,94,12,1,0,0,0,95,96,5,
		59,0,0,96,14,1,0,0,0,97,98,5,46,0,0,98,16,1,0,0,0,99,100,5,58,0,0,100,
		18,1,0,0,0,101,102,5,114,0,0,102,103,5,101,0,0,103,104,5,116,0,0,104,105,
		5,117,0,0,105,106,5,114,0,0,106,107,5,110,0,0,107,20,1,0,0,0,108,109,5,
		43,0,0,109,22,1,0,0,0,110,111,5,45,0,0,111,24,1,0,0,0,112,113,5,42,0,0,
		113,26,1,0,0,0,114,115,5,47,0,0,115,28,1,0,0,0,116,117,5,37,0,0,117,30,
		1,0,0,0,118,119,5,61,0,0,119,32,1,0,0,0,120,121,5,61,0,0,121,122,5,61,
		0,0,122,34,1,0,0,0,123,124,5,33,0,0,124,125,5,61,0,0,125,36,1,0,0,0,126,
		127,5,60,0,0,127,38,1,0,0,0,128,129,5,62,0,0,129,40,1,0,0,0,130,131,5,
		60,0,0,131,132,5,61,0,0,132,42,1,0,0,0,133,134,5,62,0,0,134,135,5,61,0,
		0,135,44,1,0,0,0,136,137,5,33,0,0,137,46,1,0,0,0,138,139,5,116,0,0,139,
		140,5,114,0,0,140,141,5,117,0,0,141,142,5,101,0,0,142,48,1,0,0,0,143,144,
		5,102,0,0,144,145,5,97,0,0,145,146,5,108,0,0,146,147,5,115,0,0,147,148,
		5,101,0,0,148,50,1,0,0,0,149,150,5,38,0,0,150,151,5,38,0,0,151,52,1,0,
		0,0,152,153,5,124,0,0,153,154,5,124,0,0,154,54,1,0,0,0,155,156,5,98,0,
		0,156,157,5,111,0,0,157,158,5,111,0,0,158,159,5,108,0,0,159,160,5,101,
		0,0,160,161,5,97,0,0,161,162,5,110,0,0,162,56,1,0,0,0,163,164,5,110,0,
		0,164,165,5,117,0,0,165,166,5,109,0,0,166,167,5,98,0,0,167,168,5,101,0,
		0,168,169,5,114,0,0,169,58,1,0,0,0,170,171,5,100,0,0,171,172,5,101,0,0,
		172,173,5,118,0,0,173,174,5,105,0,0,174,175,5,99,0,0,175,176,5,101,0,0,
		176,60,1,0,0,0,177,178,5,105,0,0,178,179,5,102,0,0,179,62,1,0,0,0,180,
		181,5,101,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,184,5,101,0,0,184,
		64,1,0,0,0,185,190,3,69,34,0,186,189,3,69,34,0,187,189,3,67,33,0,188,186,
		1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,
		0,191,66,1,0,0,0,192,190,1,0,0,0,193,194,2,48,57,0,194,68,1,0,0,0,195,
		196,7,0,0,0,196,70,1,0,0,0,197,199,5,45,0,0,198,197,1,0,0,0,198,199,1,
		0,0,0,199,200,1,0,0,0,200,207,3,73,36,0,201,203,5,46,0,0,202,204,7,1,0,
		0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,
		208,1,0,0,0,207,201,1,0,0,0,207,208,1,0,0,0,208,72,1,0,0,0,209,218,5,48,
		0,0,210,214,7,2,0,0,211,213,7,1,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,
		212,1,0,0,0,214,215,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,217,209,1,
		0,0,0,217,210,1,0,0,0,218,74,1,0,0,0,219,220,5,47,0,0,220,221,5,42,0,0,
		221,225,1,0,0,0,222,224,9,0,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,226,
		1,0,0,0,225,223,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,42,0,
		0,229,247,5,47,0,0,230,231,5,47,0,0,231,232,5,47,0,0,232,236,1,0,0,0,233,
		235,9,0,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,237,1,0,0,0,236,234,1,
		0,0,0,237,244,1,0,0,0,238,236,1,0,0,0,239,241,5,13,0,0,240,239,1,0,0,0,
		240,241,1,0,0,0,241,242,1,0,0,0,242,245,5,10,0,0,243,245,5,0,0,1,244,240,
		1,0,0,0,244,243,1,0,0,0,245,247,1,0,0,0,246,219,1,0,0,0,246,230,1,0,0,
		0,247,248,1,0,0,0,248,249,6,37,0,0,249,76,1,0,0,0,250,252,7,3,0,0,251,
		250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,255,1,
		0,0,0,255,256,6,38,0,0,256,78,1,0,0,0,14,0,188,190,198,205,207,214,217,
		225,236,240,244,246,253,1,6,0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}